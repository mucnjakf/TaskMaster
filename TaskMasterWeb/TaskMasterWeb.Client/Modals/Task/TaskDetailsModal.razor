<div class="container">
    <div class="row">
        <div class="col-6">
            ID:
        </div>
        <div class="col-6">
            @Localizer["name"]:
        </div>
    </div>
    <div class="row lead fw-bold">
        <div class="col-6">
            @Task.Id
        </div>
        <div class="col-6">
            @Task.Name
        </div>
    </div>

    <hr/>

    <div class="row">
        <div class="col-6">
            @Localizer["status"]:
        </div>
        <div class="col-6">
            @Localizer["priority"]:
        </div>
    </div>
    <div class="row lead fw-bold">
        <div class="col-6">
            @LocalizationUtilities.LocalizeStatus(Task.Status, Localizer)
        </div>
        <div class="col-6">
            @LocalizationUtilities.LocalizePriority(Task.Priority, Localizer)
        </div>
    </div>

    <hr/>

    <div class="row mt-3">
        <div class="col-6">
            @Localizer["assignee-email"]:
        </div>
        <div class="col-6">
            @Localizer["assignee-full-name"]:
        </div>
    </div>
    <div class="row lead fw-bold">
        <div class="col-6">
            @Task.Assignee.Email
        </div>
        <div class="col-6">
            @Task.Assignee.FullName
        </div>
    </div>

    <hr/>

    <div class="row mt-3">
        <div class="col-6">
            @Localizer["project-name"]:
        </div>
        <div class="col-6">
            @Localizer["project-assignee"]:
        </div>
    </div>
    <div class="row lead fw-bold">
        <div class="col-6">
            @Task.Project.Name
        </div>
        <div class="col-6">
            @Task.Project.Assignee
        </div>
    </div>

    <hr/>

    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="CloseAsync">@Localizer["close"]</button>
        </div>
    </div>
</div>

@code {

    [Inject]
    public IStringLocalizer<Resource> Localizer { get; set; } = default!;

    [Parameter]
    public TaskDto Task { get; set; } = default!;

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModalInstance { get; set; } = default!;

    private async Task CloseAsync()
    {
        await BlazoredModalInstance.CloseAsync(ModalResult.Cancel());
    }

}